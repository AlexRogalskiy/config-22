" Pieced together from various sources, including:
" * vimcasts.org
" * https://github.com/carlhuda/janus
" * The O'Reilly book: http://oreilly.com/catalog/9780596529833
" * http://colemak.com/pub/vim/colemak.vim

" For colemak keyboard layout; source .vimrc-qwerty to undo
" Need to do this before loading gundo plugin
source ~/.vimrc-colemak

" Add all vimscripts from the ~/.vim/bundle directory to the path
silent! call pathogen#runtime_append_all_bundles()
silent! call pathogen#helptags()

set encoding=utf-8
set nocompatible                " make Vim behave in a more useful way
set lazyredraw                  " don't redraw screen while executing macros/mappings
set winaltkeys=no               " allow mapping of alt (meta) key shortcuts
set mouse=a                     " allow mouse in terminal version

" Whitespace Settings
set autoindent                  " maintain indent level on new line
set expandtab                   " use soft tabs
set tabstop=4                   " use 4 spaces for tabs
set shiftwidth=4                " use 4 spaces for auto-indent
set softtabstop=4               " use 4 spaces for backspace

" Display of Non-Printing Characters
set list                        " show listchars
set listchars=tab:▸\ ,trail:-   " show tabs and trailing
set listchars+=eol:¬            " show end of line

" Horizontal Scrolling
set nowrap
set sidescroll=20               " show 20 more characters when scolling horizontally
set listchars+=extends:»,precedes:« " show horizontal continuation
set whichwrap=b,s,[,],<,>,h,l   " allow cursor to wrap between lines
set backspace=indent,eol,start  " allow backspacing over everything in insert mode
"set wrapmargin=10              " for non-program text

" Cursor Management
set nostartofline               " keep cursor in the same column when moving lines if possible
set scrolloff=1                 " minimal number of screen lines to keep above and below the cursor

" Searching
set incsearch                   " enable incremental search
set nohlsearch                  " do not highlight search patterns
set ignorecase                  " ignore case
set smartcase                   " ignore case when the pattern contains lowercase letters only

" Visual
set virtualedit=block           " allow selecting a rectangle in visual mode

" Display
set ruler                       " show the cursor position all the time
set showcmd                     " display incomplete commands
set showtabline=2               " always show tab page labels
set number                      " display line numbers
set showmatch                   " match brackets

" Saving & Backup
"set hidden                      " you can change buffers without saving
set autowriteall                " auto-save when switching buffers or shelling command
set directory=~/.vim/backup
set backupdir=~/.vim/backup

" Folding
set foldenable                  " allow folding in syntax foldmethod
set foldcolumn=3                " show folding in margin

" Status Bar
set laststatus=2                " always show status bar

" Remember more commands and search history
set history=1000

set visualbell                  " Instead of beep

" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways

" Turn off modelines (comments that set vim config in files you open)
set nomodeline
set modelines=0

" MacVIM shift+arrow-keys behavior (required in .vimrc)
let macvim_hig_shift_movement = 1

if has("autocmd")
    " Enable file type detection
    filetype on
    filetype plugin on

    " Enable intelligent indenting
    " may require set paste before pasting, and set nopaste after?
    filetype indent on
    filetype plugin indent on

    " Auto update .vimrc changes
    autocmd BufWritePost .vimrc source $MYVIMRC
    autocmd BufWritePost vimrc source $MYVIMRC
    autocmd BufWritePost .vimrc-colemak source $MYVIMRC
    autocmd BufWritePost vimrc-colemak source $MYVIMRC

    autocmd BufNewFile,BufRead *.as set filetype=actionscript
    autocmd BufNewFile,BufRead *.properties,*.targets,*.proj,*.build,*.csproj set filetype=xml
    autocmd BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set filetype=ruby
    "autocmd BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

    " Syntax of these languages is fussy over tabs vs spaces
    autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

    " Customizations based on house-style
    autocmd FileType html setlocal ts=2 sts=2 sw=2 noexpandtab
    autocmd FileType xml setlocal ts=2 sts=2 sw=2 noexpandtab
    autocmd FileType css setlocal ts=2 sts=2 sw=2 noexpandtab
    autocmd FileType javascript setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab

    autocmd BufRead,BufNewFile *.txt setlocal wrap linebreak nolist

    " git syntax
    autocmd BufNewFile,BufRead *.git/COMMIT_EDITMSG     setf gitcommit
    autocmd BufNewFile,BufRead *.git/config,.gitconfig  setf gitconfig
    autocmd BufNewFile,BufRead git-rebase-todo          setf gitrebase
    autocmd BufNewFile,BufRead .msg.[0-9]*
        \ if getline(1) =~ '^From.*# This line is ignored.$' |
        \   setf gitsendemail |
        \ endif
    autocmd BufNewFile,BufRead *.git/**
        \ if getline(1) =~ '^\x\{40\}\>\|^ref: ' |
        \   setf git |
        \ endif

    " Auto strip whitespace on save for whitelisted file types
    autocmd BufWritePre *.c,*.css,*.html,*.xml,*.py,*.js :call <SID>StripTrailingWhitespaces()
    function! <SID>StripTrailingWhitespaces()
        " Preparation: save last search, and cursor position.
        let _s=@/
        let l = line(".")
        let c = col(".")
        " Do the business:
        %s/\s\+$//e
        " Clean up: restore previous search history, and cursor position
        let @/=_s
        call cursor(l, c)
    endfunction

    " Restore cursor position
    autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

    " Auto detect filetype for extensionless files
    augroup newFileDetection
        autocmd CursorMovedI * call <SID>CheckFileType()
    augroup END
    function <SID>CheckFileType()
        if exists("b:countCheck") == 0
            let b:countCheck = 0
        endif

        let b:countCheck += 1

        " Don't start detecting until approx. 20 characters in buffer
        if &filetype == "" && b:countCheck > 20 && b:countCheck < 200
            filetype detect
        endif

        " If we've exceeded the count threshold, or a filetype has been detected,
        " delete the autocmd
        if b:countCheck >= 200 || &filetype != ""
            autocmd! newFileDetection
        endif
    endfunction
endif

" &t_Co = number of colors
if &t_Co > 2 || has("gui_running")
    colorscheme motus

    " Enable syntax highlighting
    syntax on

    " We need these commands to run after syntax highlighting
    highlight NonText guifg=#666666
    highlight SpecialKey guifg=#666666
endif

if has("win32")
    source $VIMRUNTIME/mswin.vim
endif

let mapleader=','

" Opens file relative to current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabedit %%

" Open help for word under cursor
map gh "zyw:exe "h ".@z.""<CR>

" Wrap -> enable sane soft-wrapping, which doesn't work in conjunction with set list
command! -nargs=* Wrap set wrap linebreak nolist

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

""""""""""""""""""""""""
" Plugin configuration
"
if exists(":Tabularize")
    nmap <Leader>a= :Tabularize /=<CR>
    vmap <Leader>a= :Tabularize /=<CR>
    nmap <Leader>a: :Tabularize /:\zs<CR>
    vmap <Leader>a: :Tabularize /:\zs<CR>
    nmap <Leader>a<Space> :Tabularize / <CR>
    vmap <Leader>a<Space> :Tabularize / <CR>

    " to align on insert mode on pipe character, for writing cucumber-like tables
    " (would be nice to have a command that triggers this on and off):
    "inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
    function! s:align()
        let p = '^\s*|\s.*\s|\s*$'
        if getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
            let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
            let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
            Tabularize/|/l1
            normal! 0
            call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
        endif
    endfunction
endif

nnoremap <D-u> :GundoToggle<CR>

" NERDTree configuration
let NERDTreeIgnore=['\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>

" Command-T configuration
let g:CommandTMaxHeight=20

" ZoomWin configuration
map <Leader><Leader> :ZoomWin<CR>

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
map <C-\> :tnext<CR>

" Enable syntastic syntax checking
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

" gist-vim defaults
if has("mac")
    let g:gist_clip_command = 'pbcopy'
elseif has("unix")
    let g:gist_clip_command = 'xclip -selection clipboard'
endif
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" Bubble lines (using unimpaired.vim)
nmap <C-Up> [e
nmap <C-Down> ]e
vmap <C-Up> [egv
vmap <C-Down> ]egv

