" Pieced together from various sources, including:
" * vimcasts.org
" * The O'Reilly book: http://oreilly.com/catalog/9780596529833
" * https://github.com/carlhuda/janus
" * http://colemak.com/pub/vim/colemak.vim
" * https://github.com/isa/VimFiles
" * http://spf13.com/post/perfect-vimrc-vim-config-file

" Needs to be first line
set nocompatible

" On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
" across (heterogeneous) systems easier. 
if has('win32') || has('win64')
  set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
  "let &runtimepath = substitute(&runtimepath,'\(Documents and Settings[\\/][^\\/]*\)[\\/]\zsvimfiles\>','.vim','g')
endif

" Add all vimscripts from the ~/.vim/bundle directory to the path
silent! call pathogen#runtime_append_all_bundles()
silent! call pathogen#helptags()

" For colemak keyboard layout; source .vimrc-qwerty to undo
" Need to do this before loading gundo plugin
source ~/.vimrc-colemak

set background=dark
set encoding=utf-8
set lazyredraw                  " don't redraw screen while executing macros/mappings
set winaltkeys=no               " allow mapping of alt (meta) key shortcuts
set mouse=a                     " allow mouse in terminal version

" Whitespace Settings
set autoindent                  " maintain indent level on new line
set expandtab                   " use soft tabs
set tabstop=4                   " use 4 spaces for tabs
set shiftwidth=4                " use 4 spaces for auto-indent
set softtabstop=4               " use 4 spaces for backspace

" Display of Non-Printing Characters
set list                        " show listchars
set listchars=tab:▸\ ,trail:-   " show tabs and trailing
set listchars+=eol:¬            " show end of line

" Horizontal Scrolling
set nowrap
set sidescroll=20               " show 20 more characters when scolling horizontally
set listchars+=extends:»,precedes:« " show horizontal continuation
set whichwrap=b,s,[,],<,>,h,l   " allow cursor to wrap between lines
set backspace=indent,eol,start  " allow backspacing over everything in insert mode
"set wrapmargin=10              " for non-program text

" Cursor Management
set nostartofline               " keep cursor in the same column when moving lines if possible
set scrolloff=1                 " minimal number of screen lines to keep above and below the cursor
"set cursorline                  " highlight current line

" Searching
set incsearch                   " enable incremental search
set hlsearch                    " highlight search patterns
set ignorecase                  " ignore case
set smartcase                   " ignore case when the pattern contains lowercase letters only
set gdefault                    " make global search/replace the default

" Visual
set virtualedit=block           " allow selecting a rectangle in visual mode

" Display
set showcmd                     " display incomplete commands
set showtabline=2               " always show tab page labels
set number                      " display line numbers
set showmatch                   " match brackets

" Saving & Backup
"set hidden                     " you can change buffers without saving
set autowriteall                " auto-save when switching buffers or shelling command
set directory=~/.vim/backup
set backupdir=~/.vim/backup

" Folding
set foldenable                  " allow folding in syntax foldmethod
set foldcolumn=3                " show folding in margin

" Splitting
set splitbelow                  " New window below current
set splitright                  " New window to right of current

set history=1000                " Remember more commands and search history
set visualbell                  " Instead of beep

" MacVIM shift+arrow-keys behavior (required in .vimrc)
let macvim_hig_shift_movement = 1

" Space for removing highlights
nnoremap <silent> <Space> :silent noh<Bar>echo<cr>

" Make Y behave like C and D
nnoremap Y y$

" Enable normal regex scheme, not the crazy vim scheme
nnoremap / /\v
vnoremap / /\v

" Show current color scheme for each element
nmap <leader>sc ::so $VIMRUNTIME/syntax/hitest.vim<CR>

if has("autocmd")
    " Enable file type detection
    filetype on
    filetype plugin on

    " Enable intelligent indenting
    " may require set paste before pasting, and set nopaste after?
    filetype indent on
    filetype plugin indent on

    " Auto update .vimrc changes
    autocmd BufWritePost .vimrc source $MYVIMRC
    autocmd BufWritePost vimrc source $MYVIMRC
    autocmd BufWritePost .vimrc-colemak source $MYVIMRC
    autocmd BufWritePost vimrc-colemak source $MYVIMRC
    autocmd BufWritePost .vimrc-plugins source $MYVIMRC
    autocmd BufWritePost vimrc-plugins source $MYVIMRC

    autocmd BufNewFile,BufRead *.as set filetype=actionscript
    autocmd BufNewFile,BufRead *.properties,*.targets,*.proj,*.build,*.csproj set filetype=xml
    autocmd BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set filetype=ruby

    " Syntax of these languages is fussy over tabs vs spaces
    autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

    " Customizations based on house-style
    autocmd FileType html setlocal ts=2 sts=2 sw=2 noexpandtab
    autocmd FileType xml setlocal ts=2 sts=2 sw=2 noexpandtab
    autocmd FileType css setlocal ts=2 sts=2 sw=2 noexpandtab
    autocmd FileType javascript setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab

    autocmd BufRead,BufNewFile *.txt setlocal wrap linebreak nolist

    autocmd FocusGained * if !has('win32') | silent! call fugitive#reload_status() | endif

    " git syntax
    autocmd BufNewFile,BufRead *.git/COMMIT_EDITMSG     setf gitcommit
    autocmd BufNewFile,BufRead *.git/config,.gitconfig  setf gitconfig
    autocmd BufNewFile,BufRead git-rebase-todo          setf gitrebase
    autocmd BufNewFile,BufRead .msg.[0-9]*
        \ if getline(1) =~ '^From.*# This line is ignored.$' |
        \   setf gitsendemail |
        \ endif
    autocmd BufNewFile,BufRead *.git/**
        \ if getline(1) =~ '^\x\{40\}\>\|^ref: ' |
        \   setf git |
        \ endif

    " Auto strip whitespace on save for whitelisted file types
    autocmd BufWritePre *.c,*.css,*.html,*.xml,*.py,*.js :call <SID>StripTrailingWhitespaces()
    function! <SID>StripTrailingWhitespaces()
        " Preparation: save last search, and cursor position.
        let _s=@/
        let l = line(".")
        let c = col(".")
        " Do the business:
        %s/\s\+$//e
        " Clean up: restore previous search history, and cursor position
        let @/=_s
        call cursor(l, c)
    endfunction

    " Restore cursor position
    autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

    " Auto detect filetype for extensionless files
    augroup newFileDetection
        autocmd CursorMovedI * call <SID>CheckFileType()
    augroup END
    function! <SID>CheckFileType()
        if exists("b:countCheck") == 0
            let b:countCheck = 0
        endif

        let b:countCheck += 1

        " Don't start detecting until approx. 20 characters in buffer
        if &filetype == "" && b:countCheck > 20 && b:countCheck < 200
            filetype detect
        endif

        " If we've exceeded the count threshold, or a filetype has been detected,
        " delete the autocmd
        if b:countCheck >= 200 || &filetype != ""
            autocmd! newFileDetection
        endif
    endfunction

    autocmd BufWinLeave * silent! mkview    "make vim save view (state) (folds, cursor, etc)
    autocmd BufWinEnter * silent! loadview  "make vim load view (state) (folds, cursor, etc)

    " Auto detect shebangs and make script executable
    autocmd BufNewFile  * let b:chmod_exe=1
    autocmd BufWritePre * if exists("b:chmod_exe") |
          \ unlet b:chmod_exe |
          \ if getline(1) =~ '^#!' | let b:chmod_new="+x" | endif |
          \ endif
    autocmd BufWritePost,FileWritePost * if exists("b:chmod_new")|
          \ silent! execute "!chmod ".b:chmod_new." <afile>"|
          \ unlet b:chmod_new|
          \ endif
endif

" &t_Co = number of colors
if &t_Co > 2 || has("gui_running")
    colorscheme darkZ

    " Enable syntax highlighting
    syntax on

    " We need these commands to run after syntax highlighting
    highlight NonText guifg=#666666
    highlight SpecialKey guifg=#666666

    if exists("&guifont")
        if has("mac")
            set guifont=Monaco:h12
        elseif has("unix")
            if &guifont == ""
                set guifont=bitstream\ vera\ sans\ mono\ 11
            endif
        elseif has("win32")
            set guifont=Consolas:h11,Courier\ New:h10
        endif
    endif
endif

if has("win32") || has("win64")
    source $VIMRUNTIME/mswin.vim
endif

let mapleader=','

" Opens file relative to current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabedit %%

" Open help for word under cursor
map gh "zyw:exe "h ".@z.""<CR>

" Wrap -> enable sane soft-wrapping, which doesn't work in conjunction with set list
command! -nargs=* Wrap set wrap linebreak nolist

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Status line
set laststatus=2                            " Always show status line
set statusline=%<%f\                        " Filename
set statusline+=%w%h%m%r                    " Options (preview, help, modified, readonly)
set statusline+=\ \ %{fugitive#statusline()} " Git branch
set statusline+=\ \ [%{&ff}/%Y]             " file format / file type
set statusline+=\ \ %{getcwd()}             " current dir
set statusline+=%=                          " Right align remaining fields
set statusline+=buffer:%n                   " Show buffer number
set statusline+=\ \ col:%c/%v               " Show column/virtual column
set statusline+=\ \ line:%l/%L\ \           " Show line/total lines

" TODO: Fix this, incorporate above
set statusline=[%n]\ %<%.99f\ %h%w%m%r%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%y%{exists('*rails#statusline')?rails#statusline():''}%{exists('*fugitive#statusline')?fugitive#statusline():''}%#ErrorMsg#%{exists('*SyntasticStatuslineFlag')?SyntasticStatuslineFlag():''}%*%=%-16(\ %l,%c-%v\ %)%P

source ~/.vimrc-plugins
