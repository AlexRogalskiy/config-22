#!/bin/bash
#
# Initialize POSIX configuration, symlinking configuration files
# to this directory, and shell scripts to ~/scripts, and downloading
# the latest version of all vim plugins..
# This script is idempotent, and ensures that existing dotfiles, as well
# as the contents of the ~/scripts and ~/.vim directories, will be removed.
# This is intentional - it forces me to maintain everything here rather
# than separately on each machine I work on.
# Before removing anything, this script will backup existing files in
# BACKUP_DIR (defaults to ~/.backup.)
# The backup directory is a git repository managed by scripts/backup.
# This script will pass any command line arguments to scripts/backup,
# giving you control over whether to commit the changes or not
# If you do commit (with either a -c or -m argument), only one commit
# will be made for all changes.

# Remove from vim plugin directories
STRIP_PATTERN='[-.]*vim-*'

# Allow using cd
cwd=$(pwd)

function linkfiles() {
    sourcedir=$1
    destprefix=$2

    for file in $(ls $sourcedir); do
        if test -f $sourcedir/$file; then
            ln -s $(pwd)/$sourcedir/$file ${destprefix}${file}
        fi
    done
}

function backup() {
    file=$1

    if test -e $file -o -L $file; then
        $cwd/scripts/backup $file
        rm -rf $file
    fi
}

function gitinstall() {
    repo=$(basename $1 .git | sed s/$STRIP_PATTERN//)
    echo "Installing $repo..."
    cd ~/.vim/bundle
    git clone $1 $repo > /dev/null 2>&1
}

function tarinstall() {
    repo=$(basename $1 .tar.gz | sed s/$STRIP_PATTERN//)
    echo "Installing $repo..."
    cd ~/.vim/bundle
    curl -O $1 > /dev/null 2>&1
    tar xzf $(basename $1) > /dev/null
}

function fileinstall() {
    test -d ~/.vim/bundle/$2 || mkdir ~/.vim/bundle/$2
    cd ~/.vim/bundle/$2
    if test -z $3; then
        curl -O $1 2> /dev/null
    else
        curl -o $3 $1 2> /dev/null
    fi
}

# Figure out arguments to pass scripts/backup.  We can't simply pass "$@"
# because, if we commit, we only do it once at the end, but we need the
# -d option for all individual backup calls.
while getopts ":cd:m:" option; do
    case $option in
        d)
            # Same as setting -d on command line
            export BACKUP_DIR=$OPTARG
            ;;
        c)
            commit=1
            ;;
        m)
            commit=1
            ;;
        *)
            echo Invalid command line arguments, which get used for backup
            echo "Try 'scripts/backup -h' for more info"
            exit 1
            ;;
    esac
done

# First backup
backup ~/scripts
#backup ~/git-completion.bash;
backup ~/.vim

for file in $(ls dotfiles); do
    backup ~/.$file
done

platform=none
if test $(uname) = 'Darwin'; then
    platform=osx
elif test $(uname) = 'Linux'; then
    platform=linux
fi

mkdir ~/scripts
linkfiles dotfiles          ~/.
linkfiles scripts           ~/scripts/
linkfiles scripts/$platform ~/scripts/

#wget -O ~/git-completion.bash --no-check-certificate https://github.com/git/git/raw/next/contrib/completion/git-completion.bash

mkdir ~/.vim
mkdir ~/.vim/backup
mkdir ~/.vim/bundle

# Make sure exuberant-ctags is installed
if test $platform  = 'linux'; then
    sudo apt-get install exuberant-ctags
fi

# Install pathogen
echo "Installing pathogen..."
git clone https://github.com/tpope/vim-pathogen.git > /dev/null 2>&1
mv vim-pathogen/* ~/.vim
rm -rf vim-pathogen

# Install base plugins
gitinstall git://github.com/mileszs/ack.vim.git
gitinstall git://github.com/wincent/Command-T.git
tarinstall http://conque.googlecode.com/files/conque_2.1.tar.gz
fileinstall http://www.vim.org/scripts/download_script.php?src_id=12150 hexHighlight hexHighlight.vim
gitinstall git://github.com/mattn/gist-vim.git
gitinstall git://github.com/sjl/gundo.vim.git
gitinstall git://github.com/hallettj/jslint.vim.git
gitinstall git://github.com/vim-scripts/matchit.zip.git
gitinstall git://github.com/ddollar/nerdcommenter.git
gitinstall git://github.com/wycats/nerdtree.git
gitinstall git://github.com/vim-scripts/repeat.vim.git
gitinstall git://github.com/vim-scripts/ruby-matchit.git
gitinstall git://github.com/vim-scripts/searchfold.vim.git
gitinstall git://github.com/msanders/snipmate.vim.git
gitinstall git://github.com/ervandew/supertab.git
gitinstall git://github.com/scrooloose/syntastic.git
gitinstall git://github.com/godlygeek/tabular.git
gitinstall git://github.com/vim-scripts/taglist.vim.git
gitinstall git://github.com/tpope/vim-endwise.git
gitinstall git://github.com/tpope/vim-fugitive.git
gitinstall git://github.com/michaeljsmith/vim-indent-object.git
gitinstall git://github.com/robgleeson/vim-markdown-preview.git
gitinstall git://github.com/tpope/vim-surround.git
gitinstall git://github.com/tpope/vim-unimpaired.git
gitinstall git://github.com/vim-scripts/vimwiki.git
gitinstall git://github.com/vim-scripts/ZoomWin.git

# Color packs
gitinstall git://github.com/vim-scripts/Color-Sampler-Pack.git
gitinstall git://github.com/wgibbs/vim-irblack.git
gitinstall git://github.com/mrtazz/molokai.vim.git
gitinstall git://github.com/altercation/vim-colors-solarized.git
gitinstall git://github.com/tpope/vim-vividchalk.git

# Syntaxes
gitinstall git://github.com/ajf/puppet-vim.git
gitinstall git://github.com/timcharper/textile.vim.git
gitinstall git://github.com/kchmck/vim-coffee-script.git
gitinstall git://github.com/tpope/vim-cucumber.git
gitinstall git://github.com/tpope/vim-git.git
gitinstall git://github.com/tpope/vim-haml.git
gitinstall git://github.com/pangloss/vim-javascript.git
gitinstall git://github.com/tpope/vim-markdown.git
gitinstall git://github.com/tpope/vim-rails.git
gitinstall git://github.com/taq/vim-rspec.git
gitinstall git://github.com/bdd/vim-scala.git
fileinstall http://ftp.vim.org/pub/vim/runtime/syntax/git.vim           git
fileinstall http://ftp.vim.org/pub/vim/runtime/syntax/gitcommit.vim     git
fileinstall http://ftp.vim.org/pub/vim/runtime/syntax/gitconfig.vim     git
fileinstall http://ftp.vim.org/pub/vim/runtime/syntax/gitrebase.vim     git
fileinstall http://ftp.vim.org/pub/vim/runtime/syntax/gitsendemail.vim  git

# Peepopen if it exists
if test -d /Applications/PeepOpen.app/Contents/Resources/Support/vim-peepopen; then
    echo "Installing peepopen..."
    cp -r /Applications/PeepOpen.app/Contents/Resources/Support/vim-peepopen ~/.vim/bundle
fi

# Command-T special commands
cd ~/.vim/bundle/Command-T
find ruby -name '.gitignore' | xargs rm
cd ruby/command-t
ruby extconf.rb > /dev/null
make clean && make > /dev/null

# Commit if we're told to
if test ! -z $commit; then
    cd $cwd
    scripts/backup "$@"
fi
