#!/bin/bash
#
# Downloads the latest versions of all vim scripts into the ~/.vim directory.
# This script is idempotent, and ensures that the existing ~/.vim directory
# is removed before downloading new scripts.
# This is intentional - it forces me to maintain everything here rather
# than separately on each machine I work on.
# Before removing anything, this script will backup existing files in
# BACKUP_DIR (defaults to ~/.backup.)
# The backup directory is a git repository managed by scripts/backup.
# This script will pass any command line arguments to scripts/backup,
# giving you control over whether to commit the changes or not
# If you do commit (with either a -c or -m argument), only one commit
# will be made for all changes.

# Remove from vim plugin directories
STRIP_PATTERN='[-.]*vim-*'

# Allow using cd
cwd=$(pwd)

function gitinstall() {
    repo=$(basename $1 .git | sed s/$STRIP_PATTERN//)
    dir=$repo
    if test $# -eq 2; then
        dir=$2
    fi
    echo "Installing $repo..."
    cd ~/.vim/bundle
    git clone $1 $dir > /dev/null 2>&1
}

function tarinstall() {
    repo=$(basename $1 .tar.gz | sed s/$STRIP_PATTERN//)
    echo "Installing $repo..."
    cd ~/.vim/bundle
    curl -O $1 > /dev/null 2>&1
    tar xzf $(basename $1) > /dev/null
}

function fileinstall() {
    test -d ~/.vim/bundle/$2 || mkdir -p ~/.vim/bundle/$2
    cd ~/.vim/bundle/$2
    if test -z $3; then
        curl -O $1 2> /dev/null
    else
        curl -o $3 $1 2> /dev/null
    fi
}

# Figure out arguments to pass scripts/backup.  We can't simply pass "$@"
# because, if we commit, we only do it once at the end, but we need the
# -d option for all individual backup calls.
while getopts ":cd:m:" option; do
    case $option in
        d)
            # Same as setting -d on command line
            export BACKUP_DIR=$OPTARG
            ;;
        c)
            commit=1
            ;;
        m)
            commit=1
            ;;
        *)
            echo Invalid command line arguments, which get used for backup
            echo "Try 'scripts/backup -h' for more info"
            exit 1
            ;;
    esac
done

if test -e ~/.vim; then
    echo "Backing up existing ~/.vim directory"
    scripts/backup ~/.vim
    rm -rf ~/.vim
fi

mkdir ~/.vim
mkdir ~/.vim/backup
mkdir ~/.vim/bundle

# Make sure exuberant-ctags is installed
if test $(uname)  = 'Linux'; then
    echo "Installing exuberant-ctags"
    sudo apt-get -y install exuberant-ctags
fi

# Install pathogen
echo "Installing pathogen..."
git clone https://github.com/tpope/vim-pathogen.git > /dev/null 2>&1
mv vim-pathogen/* ~/.vim
rm -rf vim-pathogen

# Install base plugins
gitinstall git://github.com/tpope/vim-abolish.git
gitinstall git://github.com/mileszs/ack.vim.git
tarinstall http://conque.googlecode.com/files/conque_2.1.tar.gz
gitinstall git://github.com/nelstrom/vim-easymotion.git
fileinstall http://www.vim.org/scripts/download_script.php?src_id=12150 hexHighlight/plugin hexHighlight.vim
gitinstall git://github.com/sjl/gundo.vim.git
gitinstall git://github.com/hallettj/jslint.vim.git
gitinstall git://github.com/vim-scripts/matchit.zip.git
gitinstall git://github.com/ddollar/nerdcommenter.git
gitinstall git://github.com/wycats/nerdtree.git
fileinstall http://www.vim.org/scripts/download_script.php?src_id=2366 python-matchit/plugin python_match.vim
gitinstall git://github.com/vim-scripts/repeat.vim.git
# Overwrites matchit
gitinstall git://github.com/airblade/vim-rooter
#gitinstall git://github.com/vim-scripts/ruby-matchit.git
gitinstall git://github.com/vim-scripts/searchfold.vim.git
gitinstall git://github.com/ghewgill/vim-scmdiff.git scmdiff/plugins
#gitinstall git://github.com/vim-scripts/ShowMarks.git
gitinstall git://github.com/msanders/snipmate.vim.git
gitinstall git://github.com/spf13/snipmate-snippets.git
gitinstall git://github.com/ervandew/supertab.git
gitinstall git://github.com/scrooloose/syntastic.git
gitinstall git://github.com/godlygeek/tabular.git
gitinstall git://github.com/vim-scripts/taglist.vim.git
gitinstall git://github.com/tpope/vim-endwise.git
gitinstall git://github.com/tpope/vim-fugitive.git
gitinstall git://github.com/michaeljsmith/vim-indent-object.git
gitinstall git://github.com/robgleeson/vim-markdown-preview.git
gitinstall git://github.com/tpope/vim-surround.git
gitinstall git://github.com/tpope/vim-unimpaired.git
gitinstall git://github.com/vim-scripts/vimwiki.git
gitinstall git://github.com/vim-scripts/ZoomWin.git

# Color packs
gitinstall git://github.com/vim-scripts/Color-Sampler-Pack.git
gitinstall git://github.com/wgibbs/vim-irblack.git
gitinstall git://github.com/mrtazz/molokai.vim.git
gitinstall git://github.com/altercation/vim-colors-solarized.git
gitinstall git://github.com/tpope/vim-vividchalk.git

# Syntaxes
gitinstall git://github.com/ajf/puppet-vim.git
gitinstall git://github.com/timcharper/textile.vim.git
gitinstall git://github.com/kchmck/vim-coffee-script.git
gitinstall git://github.com/tpope/vim-cucumber.git
gitinstall git://github.com/tpope/vim-git.git
gitinstall git://github.com/tpope/vim-haml.git
gitinstall git://github.com/digitaltoad/vim-jade.git
gitinstall git://github.com/pangloss/vim-javascript.git
gitinstall git://github.com/tpope/vim-markdown.git
gitinstall git://github.com/tpope/vim-rails.git
gitinstall git://github.com/taq/vim-rspec.git
gitinstall git://github.com/bdd/vim-scala.git
fileinstall http://ftp.vim.org/pub/vim/runtime/syntax/git.vim           git
fileinstall http://ftp.vim.org/pub/vim/runtime/syntax/gitcommit.vim     git
fileinstall http://ftp.vim.org/pub/vim/runtime/syntax/gitconfig.vim     git
fileinstall http://ftp.vim.org/pub/vim/runtime/syntax/gitrebase.vim     git
fileinstall http://ftp.vim.org/pub/vim/runtime/syntax/gitsendemail.vim  git

# Peepopen if it exists
if test -d /Applications/PeepOpen.app/Contents/Resources/Support/vim-peepopen; then
    echo "Installing peepopen..."
    cp -r /Applications/PeepOpen.app/Contents/Resources/Support/vim-peepopen ~/.vim/bundle
fi

# Commit if we're told to
if test ! -z $commit; then
    # need to cd in case the -d option was passed with a relative path
    cd $cwd
    scripts/backup "$@"
fi
